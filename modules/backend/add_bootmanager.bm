##
##-------------------------------------
# Needs:
# BOOT_WHERE
# TARGET_MNT_POINT
# BOOT_LOADER
# HD_CHOICE
# HD_MAP
#
# Calls:
# logit
# progress
# create_initrd
# stringinstring
# install_grub
#
##-------------------------------------
##
add_bootmanager()
{
	local BOOT_KERNELS
	local BOOT_KERNEL
	local BOOT_RUNNING_KERNEL
	local MSG1="Creating initrd for kernel $BOOT_KERNEL ..."
	local MSG2="Installing $BOOT_LOADER to $BOOT_WHERE"
	local root_partition
	local root_device
	local wanted

	#
	# log my call
	#
	logit "add_bootmanager"

	mount --bind /proc "${TARGET_MNT_POINT}/proc"
	mount --bind /dev  "${TARGET_MNT_POINT}/dev"
	mount --bind /sys  "${TARGET_MNT_POINT}/sys"
	mount --bind /run  "${TARGET_MNT_POINT}/run"

	##
	## workaround...start
	##
	# This can be probably changed later, but for now
	# must be done as at least update-grub uses an old-style /etc/fstab
	# so we create one for that

	# 0. prepare
	root_partition=$(echo ${HD_CHOICE} |cut -d"'" -f2)
	map_devices="$(fll_disk_device $root_partition)"

	if [ -n "${HD_MAP}" ]; then
		for i in "${HD_MAP}"
		do
			part=$(echo $i | cut -d":" -f1)
			map_devices="${map_devices} $(fll_disk_device $part)"
		done
	fi
	map_devices="$(echo ${map_devices} | uniq -u)"
	wanted=""
	for map_device in ${map_devices}; do
		wanted="${wanted} --wanted ${map_device}"
	done

	chroot_it fll_fstab_generator --file /etc/fstab ${wanted}

	local cryptsource
	local crypttarget

	set -- $(fll_crypt_device ${root_partition})
	while [ -n "$1" ]; do
		cryptsource="$1"
		crypttarget="$2"
		shift 2
		if [ "${cryptsource}" = "${cryptsource#/dev/mapper/}" ]; then
			local cryptuuid
			# use uuid if possible for non /dev/mapper devices
			cryptuuid=$(udevadm info -q env --name ${cryptsource} | \
					awk 'BEGIN{FS="="}/ID_FS_UUID=/{print $2}')
			if [ -n "${cryptuuid}" ]; then
				cryptsource="UUID=${cryptuuid}"
			fi
		fi
		echo "${crypttarget#/dev/mapper/}	$cryptsource	none	luks" >> ${TARGET_MNT_POINT}/etc/crypttab
	done
	
	BOOT_KERNELS=""

	for i in $TARGET_MNT_POINT/lib/modules/?.*
	do
		BOOT_KERNEL=$(basename $i)
		BOOT_KERNELS="$BOOT_KERNELS $BOOT_KERNEL"
		progress "$MSG1"
		create_initrd
	done

	BOOT_RUNNING_KERNEL="$(uname -r)"
	# If the running kernel can't be found
	# set the default to the first available
	if ! stringinstring "$BOOT_RUNNING_KERNEL" "$BOOT_KERNELS"
	then
		set -- $BOOT_KERNELS
		BOOT_RUNNING_KERNEL="$1"
	fi

	progress "$MSG2"

	##
	## workaround...end
	##

	# Find efi system partition if we have booted by efi
	efisys=""
	if [ -d /sys/firmware/efi ]; then
		get_efisys
	fi

	# determine if map devices are just usb
	usb_dev=""
	for map_device in ${map_devices}; do
		if [ -n "$(fll_disk_isusb ${map_device})" ] ; then
			usb_dev="${usb_dev} ${map_device}"
		else
			# any non usb device means efi could be installed
			usb_dev=""
			break
		fi
	done

	# do efi if grub and have efi system partition and not usb install
	if [ "$BOOT_LOADER" = "grub" ] && [ -n "$efisys" ] && [ -z "$usb_dev" ]
	then
		install_grub_efi
	elif [ "$BOOT_LOADER" = "grub" ]
	then
		install_grub
	#
	# else lilo no longer  supported
	#
	fi

	if [ "$BOOT_LOADER" = "grub" ]; then
		# 
		# Create initital grub configuration (grub2 ignores -y)
		#
		say "create initial grub configuration"

		if [ -e "${TARGET_MNT_POINT}/etc/default/grub" ]; then
			#TODO a proper configuration
			# propagate the default video mode 
			# extract vga mode from CMDLINE
			GRUB_DEFOPTIONS=""
			GRUB_VGA=$(getbootparam vga)
			[ -n "$GRUB_VGA" ] && GRUB_DEFOPTIONS="vga=$GRUB_VGA"

			# find out what cryptopts we need for /
			local cryptsource
			local crypttarget
			set -- $(fll_crypt_device ${root_partition})
			while [ -n "$1" ]; do
				cryptsource="$1"
				crypttarget="${2#/dev/mapper/}"
				shift 2
				if [ "${cryptsource}" = "${cryptsource#/dev/mapper/}" ]; then
					local cryptuuid
					# use uuid if possible for non /dev/mapper devices
					cryptuuid=$(udevadm info -q env --name ${cryptsource} | \
							awk 'BEGIN{FS="="}/ID_FS_UUID=/{print $2}')
					if [ -n "${cryptuuid}" ]; then
						cryptsource="UUID=${cryptuuid}"
					fi
				fi
				# $dev is a crypted device on $crypt
				if [ -z "$GRUB_DEFOPTIONS" ]; then
					GRUB_DEFOPTIONS="cryptopts=source=$cryptsource,target=$crypttarget"
				else
					GRUB_DEFOPTIONS="${GRUB_DEFOPTIONS} cryptopts=source=$crypt,target=$crypttarget"
				fi
				# root is in a volume group so scan it
				fll_disk_abstract ${root_partition}
				[ "${f_d_abstract}" = "lvm" ] && GRUB_DEFOPTIONS="${GRUB_DEFOPTIONS},lvm=${root_partition##/dev/mapper/}"
			done
			sed -i -e "s#\(GRUB_CMDLINE_LINUX=\).*#\1\"${GRUB_DEFOPTIONS}\"#"  \
			${TARGET_MNT_POINT}/etc/default/grub
		fi

		# update the grub config with our changes
		chroot_it update-grub >&2
	fi

	##
	## workaround...start
	##
	# umount /proc, /dev, /sys and /run on chroot
	umount "${TARGET_MNT_POINT}/run"
	umount "${TARGET_MNT_POINT}/sys"
	umount "${TARGET_MNT_POINT}/dev"
	umount "${TARGET_MNT_POINT}/proc"
	##
	## workaround...end
	##
}
